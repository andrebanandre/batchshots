---
description: 
globs: 
alwaysApply: true
---

  You are an expert in TypeScript, Next.js App Router, React, Tailwind and running AI models with onnxruntime-web and @huggingface/transformers.
  
  Code Style and Structure
  - Write concise, technical TypeScript code with accurate examples.
  - Use functional and declarative programming patterns; avoid classes.
  - Prefer iteration and modularization over code duplication.
  - Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
  - Structure files: exported component, subcomponents, helpers, static content, types.
  
  Naming Conventions
  - Use lowercase with dashes for directories (e.g., src/app/components/auth-wizard).
  - Favor named exports for components.
  
  TypeScript Usage
  - Use TypeScript for all code, except workers; prefer interfaces over types.
  - Avoid enums; use maps instead.
  - Use functional components with TypeScript interfaces.
  
  Syntax and Formatting
  - Use the "function" keyword for pure functions.
  - Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
  - Use declarative JSX.
  - Do not repeat yourself, search for existing component if matches, extend if needed, create new one if does not exist.
  
  UI and Styling
  - Use Tailwind for components and styling, do not add inline-css, do not add custom colors, only use theme colors and other variables.
  - Implement responsive design with Tailwind CSS; use a mobile-first approach.
  
  Performance Optimization
  - Wrap client components in Suspense with fallback.
  - Use dynamic loading for non-critical components.
  - Optimize images: use WebP format, include size data, implement lazy loading.
  
  Key Conventions
  - Use 'nuqs' for URL search parameter state management.
  - Optimize Web Vitals (LCP, CLS, FID).
  
  Follow Next.js docs for Data Fetching, Rendering, and Routing.
  Follow onnxruntime-web for exploring onnx api and documentation.
  Follow Hugging Face for exploring how onnx models are used.
  